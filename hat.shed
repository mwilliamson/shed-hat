module hat;

members::
    TestResult,
    AssertionError,
    results,
    TestCase,
    assertTrue,
    assertFalse,
    assertEquals,
    runTestCases,
    run

import promises;

def TestResult class(errors: List[AssertionError]) => ::
    members::
        isSuccess,
        getErrors
    
    def isSuccess fun() => errors.isEmpty();
    def getErrors fun() => errors;
    
def AssertionError class(description: String) => ::
    members::
        getDescription
    def getDescription fun() => description;
    
val results = object::
    members::
        success,
        failure,
        all
    
    def success fun() : TestResult => TestResult(emptyList);
    
    def failure fun(description: String) : TestResult => do::
        val error = AssertionError(description);
        return TestResult(listOf[AssertionError](error));
    
    def all fun(results: List[TestResult]) => do::
        val getErrors = fun(result: TestResult) => result.getErrors();
        val concat = fun[T] => (first: List[T], second: List[T]) => first.concat(second);
        val errors = results
            .map(getErrors)
            .foldLeft(emptyList, concat[AssertionError]);
        return TestResult(errors);

def TestCase class(description: String, func: Function[TestResult]) => ::
    members::
        getDescription,
        run
    
    def getDescription fun() : String => description;
    def run fun() : TestResult => func();

def assertTrue fun(value: Boolean) =>
    if value then
        results.success()
    else
        results.failure("Expected true, got false");

def assertFalse fun(value: Boolean) =>
    if not(value) then
        results.success()
    else
        results.failure("Expected false, got true");

def assertEquals fun[T] => (expected: T, actual: T) =>
    if expected.equals(actual) then
        results.success()
    else do::
        val message = "Expected "
            .concat(represent(expected))
            .concat(", got ")
            .concat(represent(actual));
        return results.failure(message);

def TestResults class(results: List[TestResult]) => ::
    members::
        add,
        isSuccess,
        numberOfTests,
        failures
    
    def add fun(result: TestResult) =>
        TestResults(results.append(result));
    
    def isSuccess fun() : Boolean =>
        failures().isEmpty();
    
    def numberOfTests fun() : Double =>
        results.length();
    
    def failures fun() : List[TestResult] =>
        results.filter(fun (result: TestResult) => not(result.isSuccess()));

def runTestCases fun(testCases: List[TestCase]) : Unit => do::
    // TODO: serialise test cases   
    val resultsPromise = promises.combineList(testCases.map(runTestCase));
    return resultsPromise.map(fun(results: List[TestResult]) =>
        results.foldLeft(TestResults(emptyList), combineResults)
    );

def combineResults fun(results: TestResults, result: TestResult) =>
    results.add(result);

val greenCode = "\u001B[32m";
val redCode = "\u001B[31m";
val blackCode = "\u001B[39m";

def runTestCase fun(testCase: TestCase) : TestResult => do::
    val description = testCase.getDescription();
    //print(description.concat("..."));
    val result = testCase.run();
    val resultPromise = if promises.isPromise(result) then
        result
    else
        promises.createFulfilledPromise(result);
    return resultPromise.map(fun(result: TestResult) => do::
        //print("\r");
        if result.isSuccess() then do::
            print(greenCode);
            print("✔ ");
        else do::
            print(redCode);
            print("✖ ");
        print(description);
        print(" ");
        print(blackCode);
        print("\n");
        result.getErrors().forEach(fun (error: AssertionError) => do::
            print(error.getDescription());
            print("\n\n");
        );
        return result;
    );

def run fun(argv: List[String]) => do::
    val resultsPromises = argv.map(fun(testModuleName: String) => do::
        print("Running tests: ".concat(testModuleName).concat("\n"));
        val testCases = runtimeImport(testModuleName);
        val resultsPromise = runTestCases(testCases);
        resultsPromise.map(fun(results: TestResults) => do::
            if results.isSuccess() then
                printSuccess(results)
            else
                printFailure(results);
            print("\n");
        );
        return resultsPromise;
    );
    
    promises.combineList(resultsPromises).map(fun(results: List[TestResult]) => do::
        val isSuccess = results
            .map(fun(result: TestResult) => result.isSuccess())
            .foldLeft(true, and);
        
        if isSuccess then do::
            print(greenCode);
            print("Pass!\n");
            print(blackCode);
        else do::
            print(redCode);
            print("Fail\n");
            print(blackCode);
    );

def printSuccess fun(results: TestResults) : Unit => do::
    print(greenCode);
    print("✔ ");
    print(results.numberOfTests().toString());
    print(" test(s) passed\n");
    print(blackCode);

def printFailure fun(results: TestResults) : Unit => do::
    val failures = results.failures();
    print(redCode);
    print("✖ ");
    print(failures.length().toString());
    print(" test failures\n");
    print(blackCode);
