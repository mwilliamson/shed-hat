public val hat = object {
    public def TestResult class(errors: List[AssertionError]) {
        public def getTestName fun() => testName;
        public def isSuccess fun() => errors.isEmpty();
    }
        
    public def AssertionError class(description: String) {
        public def getDescription fun() => description;
    }
        
    public val results = object {
        public def success fun() : TestResult => TestResult(listOf());
        
        public def failure fun(description: String) : TestResult => {
            val error = AssertionError(description);
            return TestResult(listOf(error));
        }
    };
    
    public def TestCase class(description: String, func: () -> TestResult) {
        public def getDescription fun() : String => description;
        public def run fun() : TestResult => func();
    }
    
    public def assertTrue fun(value: Boolean) => {
        return if value {
            return results.success();
        } else {
            return results.failure("Expected true, got false");
        };
    }
    
    public def runTestCases fun(testCases: List[TestCase]) : Unit => {
        testCases.forEach(runTestCase);
    }

    val greenCode = "\u001B[32m";
    val redCode = "\u001B[31m";
    val blackCode = "\u001B[39m";

    def runTestCase fun(testCase: TestCase) => {
        val description = testCase.getDescription();
        print(description.concat("..."));
        val result = testCase.run();
        print("\r");
        if result.isSuccess() {
            print(greenCode);
            print("âœ” ");
        } else {
            print(redCode);
            print("âœ– ");
        };
        print(description);
        print(" ");
        print(blackCode);
        print("\n");
    };
    
    public def run fun(argv: List[String]) => {
        val testCases = runtimeImport(argv.head());
        runTestCases(testCases);
    };
};
